静态类成员函数的说明

函数声明包含static，若函数的定义是独立的，则其中不能包含关键字static
不能通过对象来调用静态类成员函数，静态成员函数甚至不能使用this指针
静态成员函数是公有部分声明的，则可以使用类名和作用域解析运算符来调用它。
在 string类中定义了
static int HowMany(){return num_strings;}
则可以通过如下的方式调用它：
int count  =String:: HowMany();
静态数据变量只能使用静态数据成员。

有关类返回对象的说明

返回指向const对象的引用
使用const引用的常见原因是旨在提高效率，如果函数返回传递给它的对象，可以通过返回引用来提高其效率。
返回两个vector矢量对象中较大的一个，返回对象和返回对象的引用都可以
Vector Max(const Vector &v1, const Vector &v2);
const Vector& Max(const Vector & v1, const Vector &v2);

返回对象会调用复制构造函数，而返回引用不会，这也是返回引用效率更高的原因。
引用不为空，所以引用调用的对象应在调用函数执行时存在
假如参数被声明为const引用，那么返回类型也必须是const引用

返回指向非const对象的引用

两种常见的返回非const对象情形是，重载赋值运算符以及重载与cout一起使用的<<运损福
前者是为了提高效率，后者是必须这样做
重载赋值运算返回指向非const对象的引用是为了可以连续赋值，operator=()返回的引用可以对其进行修改

而operator<<()的返回值用于串接输出，返回类型必须是ostream&， 因为ostream类也没有复制构造函数

返回临时对象
如果返回的是临时对象，局部变量，则不应按引用方式返回它，因为局部变量在函数执行完成后会局部对象会
调用析构函数，导致自己的生命后期结束，这种情况下，应返回对象。比如重载operator+运算符
返回对象会隐式调用复制构造函数

返回const对象

