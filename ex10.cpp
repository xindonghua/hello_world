对象和类

1、什么是类？

面向对象的编程思想将程序设计的重点从程序的运行的过程、步骤及其分解的组合，转向了分析程序中数据的属性和数据的操作。
这使得C++更加强调数据的抽象和设计。

而类就是一种用户自定义的关于数据的抽象的组合，它描述了程序中的基本构成以及对数据的访问和操作。
在类的基础上可以通过大量数据对象的组合和数据对象间的信息传递来组成完整的应用程序，最终实现功能性目标。

北向通用导入导出其实也是这样。

2.类是如何实现抽象，封装和数据隐藏。

类的定义本身就是对数据的一种抽象过程，这种抽象一方面把复杂的数据结构分解为基本数据类型的组合，一方面定义和实现了对复杂数据类型的操作。
因此，类的定义就是把程序中的数据还原成一种基本数据模型和相应操作方式的抽象化过程。
C++语言中利用类的作用域及3种基本访问控制public，private，protected进行了数据封装，
从类的外部无法访问类的基本数据，而只能通过类的对象实体和类内的公有成员才能够访问，这样类就实现了基本的数据隐藏和封装。

3.对象和类之间的关系是什么？

面向对象的程序设计中，类是一种数据及其操作的模型定义，也就是一种数据的抽象。
通过类可以生产很多对象实体，同一个类生成的每一个对象实体都能够在存储空间内拥有自己的存储空间单元，实现对数据的存储和访问操作。
因此可以认为类是抽象模型，而对象是由类这个数据抽象模型实例化之后创建的真实数据单元。

4.类的成员函数和类的数据成员之间有啥不同？
首先，成员函数是函数，而数据成员是基本数据。从性质上看，类的数据成员是用来描述类的基本数据构成，定义了存储空间和类型，而函数成员则是类的操作功能定义。
从存储上看，类所创建的每个新对象都有自己的存储空间，类的数据成员是每一个对象所独享的（静态成员变量除外）。
但同一个类的所有对象共享同一组函数成员，每种方法对于所有对象都只有一个副本。

5.银行账户类

class BankAccount{
	public:
	
	BankAccount();
	BankAccount(const string name, const string id,double deposit);
	~BankAccount();
	void show() const{};
	void initAcount(const string name,const string id, double deposit);
	void save(const &saving){};
	void getout(const &saving){};
		
	
	private:
		string accountName_;
		string account_;
		double savings_;
};

6.类的构造函数什么时候被调用，析构函数呢？
构造函数在类创建对象时被调用，用来初始化对象内各数据成员。通常创建对象有两种情况，一种是直接创建对象，一种是通过new来创建对象。
这两种情况都会自动调用构造函数。析构函数是对象在被销毁，在被回收时自动调用的。也有两种情况，一种是该变量在超过生命周期被自动回收。
另一中就是动态对象通过delete回收自动调用析构函数。

10，this和*this表示什么

C++在类的定义过程中使用一个特殊的指针this，该指针是指向有该类创建的对象本身的指针。该指针指向类对象实体的指针，而不是针对类。
也就是说，this本质上是每一个对象自身的地址，而*this,对自身地址解引用，即是对象本身。在类的定义过程中，可以通过this指针
调用成员函数的对象，this虽然在类的定义中使用，但它本质上是在类生成对象时关于具体对象的指针。


