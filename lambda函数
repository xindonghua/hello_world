lambda表达式语法规则  匿名函数
泛型lamba 闭包
[捕获列表][参数列表]mutable(optional)异常属性->返回类型
{
//函数体	
}返回类型放在尾部

捕获列表分为以下几种
1.值捕获 2.引用捕获 3.隐式捕获 4.表达式捕获
[] 空捕获
[name,&name2] 按值捕获name 按引用捕获name2
值捕获不会修改捕获的值  引用捕获会对捕获值进行修改
[this] 捕获当前对象，使表达式可以访问该对象所有成员 成员函数
[&]按引用捕获所有变量 [=]按值捕获所有变量  隐式捕获
[=.&x]默认按值捕获，除了变量x
[&,x]默认按引用捕获，除了变量x
[name1 = expr1，name2 = expr1,...] 捕获一系列表达式

lambda默认是const函数，表达式内无法修改捕获的任何变量
指定表达式为mutable属性，可以修改表达式为非const值

double data = 1.23
auto capturningLamda=[data]{} mutable
{
	data*=2;
	std::cout<<"Data"<<data<<std::endl;
}

泛型lambda函数 C++14
参数标记为auto类型，编译器自动推导，推导规则与模板桉树推导相同

int main(void)
{
	int a =3;
	double b =35.2;
	auto isLessthan10[](auto){return 10;};
	isLessthan10(a);
	isLessthan10(b);
	return 0;
}

lambda与仿函数想类似的闭包类型；
函数拥有自身的数据，而自身数据被封闭在函数体内――闭包；
Lamda表达式捕获列表为空时，可以转换为函数指针进行值传递；

using foo = void(int)
void functional(foo f)
{
	f(10);// 调用闭包对象，相当于函数指针进行传递
}

int main(void)
{
	auto f = [][int value]{std::cout<<value<<std::endl;}
	functional(f);//传递闭包对象，隐式转换为函数指针
	f(1);//作为函数调用闭包对象
	return 0;
}
携带数据后被延迟调用
那么捕获列表不为空时，如何传递lambda表达式

std::function 函数封装 类型安全的通用、多态的函数封装
可以对任何可调用对象进行打包

